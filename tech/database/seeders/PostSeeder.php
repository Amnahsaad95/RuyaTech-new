<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Post;
use Carbon\Carbon;

class PostSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $articles = [
            [
                'title' => 'Next.js: بناء تطبيقات الويب الحديثة',
                'content' => '<h1>Next.js: بناء تطبيقات الويب الحديثة</h1>
<p>Next.js هو إطار عمل React مفتوح المصدر يتيح للمطورين بناء تطبيقات ويب قوية وعالية الأداء. يتميز Next.js بقدرته على تقديم الصفحات من جانب الخادم (SSR) وتوليد المواقع الثابتة (SSG)، مما يوفر تحسينات كبيرة في الأداء وتجربة المستخدم. يعتبر Next.js خيارًا ممتازًا للمشاريع التي تتطلب تحسين محركات البحث (SEO) وأداءً سريعًا.</p>

<h2>مميزات Next.js</h2>

<h3>تقديم الصفحات من جانب الخادم (SSR)</h3>
<p>تتيح ميزة SSR في Next.js تحميل الصفحات بشكل أسرع وتحسين SEO. عند طلب صفحة، يقوم الخادم بتجهيز محتواها بالكامل قبل إرسالها إلى المتصفح، مما يضمن أن محركات البحث يمكنها فهرسة المحتوى بسهولة. هذا يختلف عن تطبيقات React التقليدية التي تعتمد على تقديم الصفحات من جانب العميل (CSR)، حيث يتم تحميل المحتوى بعد تنفيذ JavaScript في المتصفح.</p>

<h3>توليد المواقع الثابتة (SSG)</h3>
<p>تسمح SSG بإنشاء صفحات HTML ثابتة في وقت البناء. هذه الصفحات يمكن تقديمها بسرعة فائقة من شبكات توصيل المحتوى (CDN)، مما يقلل من زمن التحميل ويحسن الأداء بشكل كبير. SSG مثالية للمواقع التي لا يتغير محتواها بشكل متكرر، مثل المدونات والمواقع الإخبارية.</p>

<h3>تحسين الأداء التلقائي</h3>
<p>يقدم Next.js العديد من التحسينات التلقائية للأداء، مثل تقسيم الكود (Code Splitting) وتحسين الصور (Image Optimization). تقسيم الكود يضمن تحميل JavaScript الضروري فقط لكل صفحة، مما يقلل من حجم الحزمة الإجمالي. تحسين الصور يقوم بتغيير حجم الصور وتنسيقها تلقائيًا لتقديمها بأفضل شكل ممكن للمستخدمين.</p>

<h3>دعم TypeScript</h3>
<p>يدعم Next.js TypeScript بشكل كامل، مما يوفر للمطورين إمكانية كتابة كود أكثر أمانًا وقابلية للصيانة. استخدام TypeScript يساعد في اكتشاف الأخطاء في وقت مبكر ويحسن من تجربة التطوير بشكل عام.</p>

<h3>توجيه API (API Routes)</h3>
<p>يمكن للمطورين إنشاء نقاط نهاية API خاصة بهم داخل مشروع Next.js باستخدام ميزة API Routes. هذا يتيح بناء واجهات خلفية بسيطة ومباشرة دون الحاجة إلى خادم منفصل، مما يبسط عملية التطوير والنشر.</p>

<h2>كيفية البدء مع Next.js</h2>
<p>للبدء في مشروع Next.js، يمكنك استخدام الأمر التالي:</p>
<pre><code>npx create-next-app my-next-app
cd my-next-app
npm run dev</code></pre>
<p>هذا الأمر سيقوم بإنشاء مشروع Next.js جديد وتثبيت جميع التبعيات اللازمة. بعد ذلك، يمكنك تشغيل الخادم التنموي والبدء في بناء تطبيقك.</p>

<h2>الخلاصة</h2>
<p>Next.js هو إطار عمل قوي ومتعدد الاستخدامات يوفر للمطورين الأدوات اللازمة لبناء تطبيقات ويب حديثة وعالية الأداء. بفضل ميزاته مثل SSR و SSG وتحسينات الأداء التلقائية، يعتبر Next.js خيارًا ممتازًا لأي مشروع ويب يتطلب سرعة وأداءً عاليين.</p>'
            ],
            [
                'title' => 'Laravel: إطار عمل PHP للإنتاجية العالية',
                'content' => '<h1>Laravel: إطار عمل PHP للإنتاجية العالية</h1>
<p>Laravel هو إطار عمل PHP مجاني ومفتوح المصدر، مصمم لتطوير تطبيقات الويب بسرعة وكفاءة. يشتهر Laravel ببساطته وأناقته، ويوفر مجموعة واسعة من الأدوات والميزات التي تبسط المهام الشائعة في تطوير الويب، مثل التوجيه (Routing)، وإدارة قواعد البيانات (Database Management)، والمصادقة (Authentication).</p>

<h2>مميزات Laravel</h2>

<h3>بنية MVC</h3>
<p>يعتمد Laravel على نمط Model-View-Controller (MVC)، الذي يفصل بين منطق التطبيق وواجهة المستخدم. هذا يسهل تنظيم الكود، وتحسين قابلية الصيانة، والتعاون بين المطورين.</p>

<h3>Eloquent ORM</h3>
<p>Eloquent ORM هو تطبيق Laravel لنمط Active Record، والذي يوفر طريقة جميلة وبسيطة للتفاعل مع قواعد البيانات. باستخدام Eloquent، يمكن للمطورين التعامل مع سجلات قاعدة البيانات ككائنات PHP، مما يقلل من الحاجة إلى كتابة استعلامات SQL معقدة.</p>

<h3>Blade Templating Engine</h3>
<p>Blade هو محرك قوالب Laravel القوي والخفيف الوزن. يسمح Blade للمطورين بكتابة كود PHP عادي داخل القوالب، ويوفر ميزات مثل الوراثة (Template Inheritance) والأقسام (Sections)، مما يسهل إنشاء تخطيطات معقدة وقابلة لإعادة الاستخدام.</p>

<h3>Artisan Console</h3>
<p>Artisan هو واجهة سطر الأوامر المضمنة في Laravel. يوفر Artisan مجموعة من الأوامر المفيدة التي تساعد المطورين على أتمتة المهام المتكررة، مثل إنشاء وحدات التحكم (Controllers)، والنماذج (Models)، والترحيلات (Migrations)، وتشغيل الاختبارات.</p>

<h3>المصادقة والتفويض</h3>
<p>يوفر Laravel نظامًا قويًا للمصادقة والتفويض خارج الصندوق، مما يسهل تأمين تطبيقات الويب. يمكن للمطورين استخدام ميزات المصادقة المضمنة في Laravel لإدارة تسجيل المستخدمين، وتسجيل الدخول، وإعادة تعيين كلمات المرور، والتحكم في الوصول إلى الموارد.</p>

<h3>إدارة الحزم (Composer)</h3>
<p>يستخدم Laravel Composer لإدارة تبعيات المشروع. Composer هو أداة لإدارة الحزم في PHP، والتي تسمح للمطورين بتضمين مكتبات الطرف الثالث بسهولة في مشاريعهم.</p>

<h2>كيفية البدء مع Laravel</h2>
<p>للبدء في مشروع Laravel، يمكنك استخدام الأمر التالي:</p>
<pre><code>composer create-project laravel/laravel my-laravel-app
cd my-laravel-app
php artisan serve</code></pre>
<p>هذا الأمر سيقوم بإنشاء مشروع Laravel جديد وتثبيت جميع التبعيات اللازمة. بعد ذلك، يمكنك تشغيل الخادم التنموي والبدء في بناء تطبيقك.</p>

<h2>الخلاصة</h2>
<p>Laravel هو إطار عمل PHP ممتاز يوفر للمطورين الأدوات والميزات اللازمة لبناء تطبيقات ويب قوية وعالية الأداء بسرعة وكفاءة. بفضل بساطته وأناقته، يعتبر Laravel خيارًا شائعًا بين المطورين في جميع أنحاء العالم.</p>'
            ],
            [
                'title' => 'Docker: الحاويات وتبسيط عملية النشر',
                'content' => '<h1>Docker: الحاويات وتبسيط عملية النشر</h1>
<p>Docker هو منصة مفتوحة المصدر لتطوير ونشر وتشغيل التطبيقات باستخدام تقنية الحاويات. توفر الحاويات طريقة لتجميع التطبيق وجميع تبعياته في وحدة واحدة معزولة، مما يضمن تشغيل التطبيق بنفس الطريقة في أي بيئة، سواء كانت بيئة تطوير، اختبار، أو إنتاج.</p>

<h2>مميزات Docker</h2>

<h3>العزل والاتساق</h3>
<p>توفر الحاويات عزلًا كاملاً للتطبيقات عن بعضها البعض وعن النظام المضيف. هذا يضمن أن التطبيقات لا تتداخل مع بعضها البعض، وأنها تعمل بشكل متسق عبر بيئات مختلفة. هذا يحل مشكلة "يعمل على جهازي" التي يواجهها المطورون غالبًا.</p>

<h3>قابلية النقل</h3>
<p>يمكن نقل حاويات Docker بسهولة بين الأنظمة المختلفة. بمجرد بناء الحاوية، يمكن تشغيلها على أي جهاز يحتوي على Docker، بغض النظر عن نظام التشغيل الأساسي أو التكوين. هذا يبسط عملية النشر والتوزيع بشكل كبير.</p>

<h3>كفاءة الموارد</h3>
<p>تعتبر الحاويات خفيفة الوزن وتستهلك موارد أقل مقارنة بالآلات الافتراضية (VMs). لا تتطلب الحاويات نظام تشغيل كامل لكل تطبيق، بل تشارك نواة نظام التشغيل المضيف، مما يوفر في استخدام الذاكرة ووحدة المعالجة المركزية.</p>

<h3>سرعة البدء</h3>
<p>تبدأ الحاويات في غضون ثوانٍ، بينما تستغرق الآلات الافتراضية دقائق للتشغيل. هذا يجعل Docker مثاليًا لبيئات التطوير والاختبار، حيث يحتاج المطورون إلى بدء وإيقاف التطبيقات بسرعة.</p>

<h3>نظام بيئي غني</h3>
<p>يمتلك Docker نظامًا بيئيًا غنيًا من الأدوات والخدمات، بما في ذلك Docker Hub، وهو مستودع عام لصور Docker، و Docker Compose، وهو أداة لتعريف وتشغيل تطبيقات Docker متعددة الحاويات.</p>

<h2>كيفية البدء مع Docker</h2>
<p>للبدء في استخدام Docker، يمكنك تثبيت Docker Desktop على جهازك. بعد التثبيت، يمكنك سحب صورة Docker وتشغيلها باستخدام الأوامر التالية:</p>
<pre><code>docker pull nginx
docker run -p 80:80 nginx</code></pre>
<p>هذا سيقوم بسحب صورة Nginx وتشغيلها في حاوية، مما يجعل خادم الويب Nginx متاحًا على المنفذ 80 من جهازك.</p>

<h2>الخلاصة</h2>
<p>Docker هو أداة قوية وغيرت طريقة تطوير ونشر التطبيقات. بفضل قدرته على توفير العزل، والاتساق، وقابلية النقل، وكفاءة الموارد، أصبح Docker جزءًا أساسيًا من سير عمل العديد من المطورين والشركات.</p>'
            ]
        ];

        // إنشاء المقالات
        foreach ($articles as $index => $articleData) {
            $article = Post::create([
                'user_id' => 3, // افتراض وجود مستخدم بـ ID = 1
                'title' => $articleData['title'],
                'content' => $articleData['content'],
                'image_path' => null,
                'parent_id' => null,
                'status' => 'published',
                'like' => rand(10, 500),
                'hit' => rand(100, 5000),
                'created_at' => Carbon::now()->subDays(rand(1, 30)),
                'updated_at' => Carbon::now()->subDays(rand(1, 30)),
            ]);

            // إنشاء 10 تعليقات لكل مقال
            $comments = [
                'شكرًا لك على هذا المقال المفيد! لقد تعلمت الكثير من المعلومات الجديدة.',
                'مقال رائع ومفصل، أتطلع لقراءة المزيد من مقالاتك حول هذا الموضوع.',
                'معلومات قيمة جدًا، هل يمكنك إضافة المزيد من الأمثلة العملية؟',
                'أشكرك على الشرح الواضح، ساعدني كثيرًا في فهم الموضوع.',
                'مقال ممتاز! هل تنصح بمصادر إضافية للتعمق أكثر في هذا المجال؟',
                'شرح مبسط ومفهوم، استفدت كثيرًا من قراءة هذا المقال.',
                'معلومات مهمة ومفيدة للمطورين، شكرًا لك على المجهود.',
                'مقال شامل ومنظم بشكل ممتاز، أقدر الوقت المبذول في كتابته.',
                'أحببت طريقة عرض المعلومات، واضحة ومباشرة.',
                'مقال مفيد جدًا، أتمنى رؤية المزيد من المحتوى المشابه.'
            ];

            foreach ($comments as $commentIndex => $commentText) {
                Post::create([
                    'user_id' => rand(3, 10), // مستخدمين مختلفين للتعليقات
                    'title' => null,
                    'content' => $commentText,
                    'image_path' => null,
                    'parent_id' => $article->id,
                    'status' => 'published',
                    'like' => rand(0, 50),
                    'hit' => rand(1, 100),
                    'created_at' => Carbon::now()->subDays(rand(1, 25)),
                    'updated_at' => Carbon::now()->subDays(rand(1, 25)),
                ]);
            }
        }

        
        // إضافة باقي المقالات (17 مقال إضافي)
        $moreArticles = [
            [
                'title' => 'Kubernetes: إدارة الحاويات على نطاق واسع',
                'content' => '<h1>Kubernetes: إدارة الحاويات على نطاق واسع</h1><p>Kubernetes، المعروف أيضًا باسم K8s، هو نظام مفتوح المصدر لأتمتة نشر وتوسيع وإدارة التطبيقات المعبأة في حاويات. تم تطويره في الأصل بواسطة Google، وهو يوفر إطار عمل قويًا لإدارة أعباء العمل والخدمات المعبأة في حاويات، مما يسهل التعامل مع التطبيقات المعقدة على نطاق واسع.</p><h2>مميزات Kubernetes</h2><h3>النشر الآلي والتوسع</h3><p>يقوم Kubernetes بأتمتة عملية نشر التطبيقات وتوسيعها بناءً على الطلب. يمكنه نشر الحاويات على مجموعة من العقد (Nodes) وتوزيع حركة المرور بينها، مما يضمن توفر التطبيق وأدائه حتى في ظل الأحمال العالية.</p>'
            ],
            [
                'title' => 'GraphQL: بديل RESTful APIs',
                'content' => '<h1>GraphQL: بديل RESTful APIs</h1><p>GraphQL هي لغة استعلام للـ APIs ووقت تشغيل لتنفيذ تلك الاستعلامات باستخدام البيانات الموجودة لديك. تم تطويرها بواسطة Facebook في عام 2012 وتم إصدارها للجمهور في عام 2015. تقدم GraphQL بديلاً مرنًا وفعالًا لـ RESTful APIs التقليدية.</p><h2>مميزات GraphQL</h2><h3>جلب البيانات بكفاءة</h3><p>تسمح GraphQL للعملاء بتحديد البيانات التي يحتاجونها بالضبط في استعلام واحد. هذا يحل مشكلة "الإفراط في الجلب" و "النقص في الجلب" التي تحدث غالبًا مع RESTful APIs.</p>'
            ],
            [
                'title' => 'TypeScript: جافاسكريبت مع أنواع البيانات',
                'content' => '<h1>TypeScript: جافاسكريبت مع أنواع البيانات</h1><p>TypeScript هي لغة برمجة مفتوحة المصدر تم تطويرها وصيانتها بواسطة Microsoft. إنها مجموعة شاملة من JavaScript، مما يعني أنها تضيف ميزات إضافية إلى JavaScript، أبرزها دعم أنواع البيانات الثابتة.</p><h2>مميزات TypeScript</h2><h3>أنواع البيانات الثابتة</h3><p>تسمح TypeScript للمطورين بتحديد أنواع البيانات للمتغيرات، والمعلمات، ودوال الإرجاع. هذا يساعد في اكتشاف الأخطاء الشائعة في وقت التطوير بدلاً من وقت التشغيل.</p>'
            ],
            [
                'title' => 'Vue.js: إطار عمل تدريجي لواجهات المستخدم',
                'content' => '<h1>Vue.js: إطار عمل تدريجي لواجهات المستخدم</h1><p>Vue.js هو إطار عمل JavaScript تدريجي لبناء واجهات المستخدم. تم تصميمه ليكون قابلاً للتكيف بسهولة، مما يعني أنه يمكن استخدامه كطبقة عرض بسيطة لمشروع موجود، أو لتطوير تطبيقات صفحة واحدة معقدة.</p><h2>مميزات Vue.js</h2><h3>تدريجي وقابل للتكيف</h3><p>تعتبر الطبيعة التدريجية لـ Vue.js إحدى أكبر مميزاته. يمكن للمطورين البدء باستخدام Vue.js لجزء صغير من تطبيقهم، ثم توسيع نطاق استخدامه تدريجيًا حسب الحاجة.</p>'
            ],
            [
                'title' => 'React Native: بناء تطبيقات الجوال الأصلية',
                'content' => '<h1>React Native: بناء تطبيقات الجوال الأصلية</h1><p>React Native هو إطار عمل مفتوح المصدر تم تطويره بواسطة Facebook لبناء تطبيقات جوال أصلية باستخدام JavaScript و React. يتيح React Native للمطورين كتابة كود واحد يمكن تشغيله على كل من منصتي iOS و Android.</p><h2>مميزات React Native</h2><h3>كتابة الكود مرة واحدة، التشغيل في كل مكان</h3><p>إحدى أكبر مميزات React Native هي القدرة على كتابة الكود مرة واحدة وتشغيله على منصتي iOS و Android. هذا يقلل بشكل كبير من وقت التطوير والتكلفة.</p>'
            ],
            [
                'title' => 'Flutter: تطوير تطبيقات متعددة المنصات',
                'content' => '<h1>Flutter: تطوير تطبيقات متعددة المنصات</h1><p>Flutter هو إطار عمل مفتوح المصدر لتطوير واجهات المستخدم تم تطويره بواسطة Google. يتيح Flutter للمطورين بناء تطبيقات مجمعة أصلاً لمنصات متعددة من قاعدة كود واحدة، بما في ذلك iOS، Android، الويب، وسطح المكتب.</p><h2>مميزات Flutter</h2><h3>قاعدة كود واحدة لمنصات متعددة</h3><p>إحدى أكبر مميزات Flutter هي القدرة على كتابة كود واحد يمكن تشغيله على منصات متعددة. هذا يقلل بشكل كبير من وقت التطوير والتكلفة.</p>'
            ],
            [
                'title' => 'Python for Web Development: Django و Flask',
                'content' => '<h1>Python for Web Development: Django و Flask</h1><p>تعتبر Python واحدة من أكثر لغات البرمجة شيوعًا وتنوعًا في العالم، وتستخدم على نطاق واسع في تطوير الويب بفضل مكتباتها وأطر عملها القوية. من بين أبرز أطر عمل الويب في Python هما Django و Flask.</p><h2>Django: إطار عمل الويب الكامل</h2><p>Django هو إطار عمل ويب عالي المستوى يتبع مبدأ "البطاريات المضمنة"، مما يعني أنه يأتي مع كل ما تحتاجه لبناء تطبيقات ويب معقدة بسرعة.</p>'
            ],
            [
                'title' => 'Go Language: لغة البرمجة عالية الأداء',
                'content' => '<h1>Go Language: لغة البرمجة عالية الأداء</h1><p>Go، والمعروفة أيضًا باسم Golang، هي لغة برمجة مفتوحة المصدر تم تطويرها بواسطة Google. تم تصميم Go لتكون لغة بسيطة، وموثوقة، وفعالة، ومناسبة لبناء أنظمة برمجية واسعة النطاق.</p><h2>مميزات Go</h2><h3>أداء عالي</h3><p>تتميز Go بأداء عالٍ بفضل تجميعها إلى كود آلة أصلي وإدارتها الفعالة للذاكرة. هذا يجعلها مناسبة للتطبيقات التي تتطلب سرعة عالية واستجابة فورية.</p>'
            ],
            [
                'title' => 'Rust Language: الأمان والأداء في برمجة الأنظمة',
                'content' => '<h1>Rust Language: الأمان والأداء في برمجة الأنظمة</h1><p>Rust هي لغة برمجة أنظمة مفتوحة المصدر تركز على الأمان، والأداء، والتزامن. تم تطويرها بواسطة Mozilla، وتكتسب Rust شعبية متزايدة في مجالات مثل تطوير أنظمة التشغيل، ومتصفحات الويب، ومحركات الألعاب.</p><h2>مميزات Rust</h2><h3>أمان الذاكرة</h3><p>تعتبر ميزة أمان الذاكرة في Rust هي الأبرز. يستخدم Rust نظام الملكية وقواعد الاستعارة لضمان أمان الذاكرة في وقت التجميع.</p>'
            ],
            [
                'title' => 'Serverless Computing: المستقبل بدون خوادم',
                'content' => '<h1>Serverless Computing: المستقبل بدون خوادم</h1><p>الحوسبة بدون خوادم هي نموذج لتنفيذ الكود حيث يقوم مزود السحابة بإدارة البنية التحتية بالكامل، مما يحرر المطورين من القلق بشأن توفير الخوادم، أو صيانتها، أو توسيع نطاقها.</p><h2>مميزات Serverless Computing</h2><h3>تقليل التكاليف</h3><p>إحدى أكبر مميزات الحوسبة بدون خوادم هي نموذج الدفع حسب الاستخدام. يتم محاسبة المستخدمين فقط على وقت التنفيذ الفعلي لوظائفهم.</p>'
            ],
            [
                'title' => 'Microservices Architecture: بناء أنظمة قابلة للتوسع',
                'content' => '<h1>Microservices Architecture: بناء أنظمة قابلة للتوسع</h1><p>هندسة الخدمات المصغرة هي نهج لتطوير التطبيقات حيث يتم بناء التطبيق كمجموعة من الخدمات الصغيرة والمستقلة، كل منها يعمل في عملية خاصة به ويتواصل مع الخدمات الأخرى عبر واجهات برمجة تطبيقات خفيفة الوزن.</p><h2>مميزات Microservices Architecture</h2><h3>قابلية التوسع المستقلة</h3><p>يمكن توسيع كل خدمة مصغرة بشكل مستقل عن الخدمات الأخرى. هذا يعني أنه يمكن توسيع الخدمات التي تتلقى طلبات أكثر دون الحاجة إلى توسيع التطبيق بأكمله.</p>'
            ],
            [
                'title' => 'CI/CD: التكامل المستمر والتسليم المستمر',
                'content' => '<h1>CI/CD: التكامل المستمر والتسليم المستمر</h1><p>CI/CD هو مجموعة من الممارسات التي تهدف إلى أتمتة وتسريع عملية تطوير البرمجيات ونشرها. يركز CI/CD على دمج التغييرات في الكود بشكل متكرر، واختبارها تلقائيًا، ونشرها إلى بيئات الإنتاج بسرعة وموثوقية.</p><h2>التكامل المستمر</h2><h3>اكتشاف الأخطاء مبكرًا</h3><p>يساعد CI في اكتشاف الأخطاء والتضاربات في الكود في وقت مبكر من دورة التطوير، مما يقلل من تكلفة إصلاحها.</p>'
            ],
            [
                'title' => 'Git and GitHub: إدارة الإصدارات والتعاون',
                'content' => '<h1>Git and GitHub: إدارة الإصدارات والتعاون</h1><p>Git هو نظام تحكم في الإصدارات موزع ومفتوح المصدر، مصمم للتعامل مع المشاريع الصغيرة والكبيرة بكفاءة وسرعة. يتيح Git للمطورين تتبع التغييرات في الكود، والتعاون مع الآخرين، والعودة إلى إصدارات سابقة من المشروع.</p><h2>مميزات Git</h2><h3>التحكم في الإصدارات</h3><p>يتيح Git للمطورين تتبع كل تغيير يتم إجراؤه على الكود، مما يسهل معرفة من قام بالتغيير، ومتى، ولماذا.</p>'
            ],
            [
                'title' => 'Agile Methodologies: تطوير البرمجيات المرن',
                'content' => '<h1>Agile Methodologies: تطوير البرمجيات المرن</h1><p>المنهجيات الرشيقة هي مجموعة من المبادئ والممارسات لتطوير البرمجيات التي تركز على التسليم المتكرر، والتعاون مع العملاء، والاستجابة للتغيير. على عكس المنهجيات التقليدية مثل Waterfall، فإن المنهجيات الرشيقة مرنة وتكيفية.</p><h2>مبادئ المنهجيات الرشيقة</h2><p>تستند المنهجيات الرشيقة إلى أربعة قيم أساسية واثني عشر مبدأ، والتي تم تلخيصها في بيان Agile Manifesto.</p>'
            ],
            [
                'title' => 'WebAssembly: أداء قريب من الأصلي على الويب',
                'content' => '<h1>WebAssembly: أداء قريب من الأصلي على الويب</h1><p>WebAssembly، أو Wasm، هي صيغة تعليمات برمجية ثنائية منخفضة المستوى مصممة للتشغيل في متصفحات الويب. توفر Wasm أداءً قريبًا من الأداء الأصلي للتطبيقات التي تعمل على الويب.</p><h2>مميزات WebAssembly</h2><h3>أداء عالي</h3><p>تتميز WebAssembly بأداء عالٍ لأنها صيغة تعليمات برمجية ثنائية يتم تجميعها مسبقًا، مما يسمح للمتصفحات بتحسينها وتنفيذها بسرعة أكبر بكثير من JavaScript.</p>'
            ],
            [
                'title' => 'Progressive Web Apps (PWAs): تجربة الويب المحسنة',
                'content' => '<h1>Progressive Web Apps (PWAs): تجربة الويب المحسنة</h1><p>تطبيقات الويب التقدمية هي تطبيقات ويب تستخدم مجموعة من التقنيات الحديثة لتقديم تجربة مستخدم تشبه التطبيقات الأصلية على الويب. تجمع PWAs بين أفضل ما في تطبيقات الويب والتطبيقات الأصلية.</p><h2>مميزات Progressive Web Apps</h2><h3>موثوقة</h3><p>يمكن لـ PWAs العمل دون اتصال بالإنترنت أو في ظروف شبكة ضعيفة بفضل استخدام Service Workers.</p>'
            ],
            [
                'title' => 'Blockchain Technology: أساسيات وتطبيقات',
                'content' => '<h1>Blockchain Technology: أساسيات وتطبيقات</h1><p>تقنية البلوك تشين هي نظام دفتر أستاذ موزع وغير قابل للتغيير يسجل المعاملات بطريقة آمنة وشفافة. تم تصميم البلوك تشين في الأصل لدعم العملة الرقمية بيتكوين، ولكنها تطورت لتصبح تقنية أساسية لمجموعة واسعة من التطبيقات.</p><h2>مميزات تقنية البلوك تشين</h2><h3>اللامركزية</h3><p>تعتبر اللامركزية إحدى السمات الأساسية للبلوك تشين. بدلاً من وجود سلطة مركزية تتحكم في البيانات، يتم توزيع دفتر الأستاذ عبر شبكة من أجهزة الكمبيوتر.</p>'
            ]
        ];

        // إضافة المقالات الإضافية
        foreach ($moreArticles as $index => $articleData) {
            $article = Post::create([
                'user_id' => 3,
                'title' => $articleData['title'],
                'content' => $articleData['content'],
                'image_path' => null,
                'parent_id' => null,
                'status' => 'published',
                'like' => rand(10, 500),
                'hit' => rand(100, 5000),
                'created_at' => Carbon::now()->subDays(rand(1, 30)),
                'updated_at' => Carbon::now()->subDays(rand(1, 30)),
            ]);

            // إنشاء 10 تعليقات لكل مقال
            $comments = [
                'شكرًا لك على هذا المقال المفيد! لقد تعلمت الكثير من المعلومات الجديدة.',
                'مقال رائع ومفصل، أتطلع لقراءة المزيد من مقالاتك حول هذا الموضوع.',
                'معلومات قيمة جدًا، هل يمكنك إضافة المزيد من الأمثلة العملية؟',
                'أشكرك على الشرح الواضح، ساعدني كثيرًا في فهم الموضوع.',
                'مقال ممتاز! هل تنصح بمصادر إضافية للتعمق أكثر في هذا المجال؟',
                'شرح مبسط ومفهوم، استفدت كثيرًا من قراءة هذا المقال.',
                'معلومات مهمة ومفيدة للمطورين، شكرًا لك على المجهود.',
                'مقال شامل ومنظم بشكل ممتاز، أقدر الوقت المبذول في كتابته.',
                'أحببت طريقة عرض المعلومات، واضحة ومباشرة.',
                'مقال مفيد جدًا، أتمنى رؤية المزيد من المحتوى المشابه.'
            ];

            foreach ($comments as $commentIndex => $commentText) {
                Post::create([
                    'user_id' => rand(3, 10),
                    'title' => null,
                    'content' => $commentText,
                    'image_path' => null,
                    'parent_id' => $article->id,
                    'status' => 'published',
                    'like' => rand(0, 50),
                    'hit' => rand(1, 100),
                    'created_at' => Carbon::now()->subDays(rand(1, 25)),
                    'updated_at' => Carbon::now()->subDays(rand(1, 25)),
                ]);
            }
        }
    }
}





